// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	publisher "github.com/ptrvsrg/crack-hash/commonlib/bus/amqp/publisher"
	mock "github.com/stretchr/testify/mock"
)

// PublisherMock is an autogenerated mock type for the Publisher type
type PublisherMock[T any] struct {
	mock.Mock
}

type PublisherMock_Expecter[T any] struct {
	mock *mock.Mock
}

func (_m *PublisherMock[T]) EXPECT() *PublisherMock_Expecter[T] {
	return &PublisherMock_Expecter[T]{mock: &_m.Mock}
}

// SendMessage provides a mock function with given fields: ctx, message, mode, mandatory, immediate
func (_m *PublisherMock[T]) SendMessage(ctx context.Context, message *T, mode publisher.DeliveryMode, mandatory bool, immediate bool) error {
	ret := _m.Called(ctx, message, mode, mandatory, immediate)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *T, publisher.DeliveryMode, bool, bool) error); ok {
		r0 = rf(ctx, message, mode, mandatory, immediate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublisherMock_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type PublisherMock_SendMessage_Call[T any] struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *T
//   - mode publisher.DeliveryMode
//   - mandatory bool
//   - immediate bool
func (_e *PublisherMock_Expecter[T]) SendMessage(ctx interface{}, message interface{}, mode interface{}, mandatory interface{}, immediate interface{}) *PublisherMock_SendMessage_Call[T] {
	return &PublisherMock_SendMessage_Call[T]{Call: _e.mock.On("SendMessage", ctx, message, mode, mandatory, immediate)}
}

func (_c *PublisherMock_SendMessage_Call[T]) Run(run func(ctx context.Context, message *T, mode publisher.DeliveryMode, mandatory bool, immediate bool)) *PublisherMock_SendMessage_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*T), args[2].(publisher.DeliveryMode), args[3].(bool), args[4].(bool))
	})
	return _c
}

func (_c *PublisherMock_SendMessage_Call[T]) Return(_a0 error) *PublisherMock_SendMessage_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PublisherMock_SendMessage_Call[T]) RunAndReturn(run func(context.Context, *T, publisher.DeliveryMode, bool, bool) error) *PublisherMock_SendMessage_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewPublisherMock creates a new instance of PublisherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisherMock[T any](t interface {
	mock.TestingT
	Cleanup(func())
}) *PublisherMock[T] {
	mock := &PublisherMock[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
