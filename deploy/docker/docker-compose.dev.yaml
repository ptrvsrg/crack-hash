version: "3.8"

name: "crack-hash-dev"

volumes:
  rabbitmq1-data:
  rabbitmq2-data:
  rabbitmq3-data:
  rabbitmq1-logs:
  rabbitmq2-logs:
  rabbitmq3-logs:

  mongo-rs-pki:
  mongo1-data:
  mongo2-data:
  mongo3-data:
  mongo1-config:
  mongo2-config:
  mongo3-config:
  mongo1-logs:
  mongo2-logs:
  mongo3-logs:

networks:
  net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/24

services:
  ##### RabbitMQ #####
  rabbitmq1:
    image: 'rabbitmq:4.0.6-management-alpine'
    hostname: rabbitmq1
    restart: unless-stopped
    environment:
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
      RABBITMQ_ERLANG_COOKIE: secret
      NODENAME: rabbitmq@rabbitmq1
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms" ]
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - rabbitmq1-data:/var/lib/rabbitmq
      - rabbitmq1-logs:/var/log/rabbitmq
      - ./config/dev/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/dev/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - net

  rabbitmq2:
    image: 'rabbitmq:4.0.6-management-alpine'
    hostname: rabbitmq2
    restart: unless-stopped
    environment:
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
      RABBITMQ_ERLANG_COOKIE: secret
      NODENAME: rabbitmq@rabbitmq2
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms" ]
    ports:
      - '5673:5672'
      - '15673:15672'
    volumes:
      - rabbitmq2-data:/var/lib/rabbitmq
      - rabbitmq2-logs:/var/log/rabbitmq
      - ./config/dev/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/dev/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - net

  rabbitmq3:
    image: 'rabbitmq:4.0.6-management-alpine'
    hostname: rabbitmq3
    restart: unless-stopped
    environment:
      RABBITMQ_CONFIG_FILE: /etc/rabbitmq/rabbitmq.conf
      RABBITMQ_ERLANG_COOKIE: secret
      NODENAME: rabbitmq@rabbitmq3
    healthcheck:
      test: [ "CMD-SHELL", "rabbitmq-diagnostics -q status && rabbitmq-diagnostics -q check_local_alarms" ]
    ports:
      - '5674:5672'
      - '15674:15672'
    volumes:
      - rabbitmq3-data:/var/lib/rabbitmq
      - rabbitmq3-logs:/var/log/rabbitmq
      - ./config/dev/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./config/dev/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - net

  ##### MongoDB #####
  mongo-pki-setup:
    image: mongo:7.0.17-jammy
    restart: no
    entrypoint: [ "bash", "/scripts/pki_setup.sh" ]
    volumes:
      - mongo-rs-pki:/etc/mongodb/pki
      - ./config/dev/mongo/pki_setup.sh:/scripts/pki_setup.sh
    networks:
      - net

  mongo1:
    image: mongo:7.0.17-jammy
    restart: unless-stopped
    command: [ "--config", "/etc/mongodb/mongod.conf" ]
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: crack_hash
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
    ports:
      - '27017:27017'
    volumes:
      - mongo1-data:/data/db
      - mongo1-config:/data/configdb
      - mongo1-logs:/var/log/mongodb
      - mongo-rs-pki:/etc/mongodb/pki:ro
      - ./config/dev/mongo/mongod.conf:/etc/mongodb/mongod.conf:ro
    networks:
      net:
        ipv4_address: 172.28.0.10
    depends_on:
      mongo-pki-setup:
        condition: service_completed_successfully

  mongo2:
    image: mongo:7.0.17-jammy
    restart: unless-stopped
    command: [ "--config", "/etc/mongodb/mongod.conf" ]
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
    ports:
      - '27018:27017'
    volumes:
      - mongo2-data:/data/db
      - mongo2-config:/data/configdb
      - mongo2-logs:/var/log/mongodb
      - mongo-rs-pki:/etc/mongodb/pki:ro
      - ./config/dev/mongo/mongod.conf:/etc/mongodb/mongod.conf:ro
    networks:
      net:
        ipv4_address: 172.28.0.11
    depends_on:
      mongo-pki-setup:
        condition: service_completed_successfully

  mongo3:
    image: mongo:7.0.17-jammy
    restart: unless-stopped
    command: [ "--config", "/etc/mongodb/mongod.conf" ]
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $$MONGO_INITDB_ROOT_USERNAME -p $$MONGO_INITDB_ROOT_PASSWORD --quiet | grep 1
    ports:
      - '27019:27017'
    volumes:
      - mongo3-data:/data/db
      - mongo3-config:/data/configdb
      - mongo3-logs:/var/log/mongodb
      - mongo-rs-pki:/etc/mongodb/pki:ro
      - ./config/dev/mongo/mongod.conf:/etc/mongodb/mongod.conf:ro
    networks:
      net:
        ipv4_address: 172.28.0.12
    depends_on:
      mongo-pki-setup:
        condition: service_completed_successfully

  mongo-rs-setup:
    image: mongo:7.0.17-jammy
    restart: no
    entrypoint: [ "bash", "/scripts/rs_setup.sh" ]
    environment:
      MONGO_USERNAME: admin
      MONGO_PASSWORD: password
    volumes:
      - ./config/dev/mongo/rs_setup.sh:/scripts/rs_setup.sh
    networks:
      - net
    depends_on:
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_healthy
      mongo3:
        condition: service_healthy

  mongo-express:
    image: mongo-express:1.0.2-20-alpine3.19
    restart: unless-stopped
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://admin:password@172.28.0.10:27017,172.28.0.11:27017,172.28.0.12:27017?replicaSet=rs0
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: password
    healthcheck:
      test: [ 'CMD-SHELL', 'wget -O - http://0.0.0.0:8081/status | grep "{\"status\":\"ok\"}"' ]
    networks:
      - net
    ports:
      - '8081:8081'
    depends_on:
      mongo-rs-setup:
        condition: service_completed_successfully