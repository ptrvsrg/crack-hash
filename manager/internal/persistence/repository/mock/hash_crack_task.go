// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/ptrvsrg/crack-hash/manager/internal/persistence/entity"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// HashCrackTaskMock is an autogenerated mock type for the HashCrackTask type
type HashCrackTaskMock struct {
	mock.Mock
}

type HashCrackTaskMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HashCrackTaskMock) EXPECT() *HashCrackTaskMock_Expecter {
	return &HashCrackTaskMock_Expecter{mock: &_m.Mock}
}

// CountByStatus provides a mock function with given fields: ctx, status
func (_m *HashCrackTaskMock) CountByStatus(ctx context.Context, status entity.HashCrackTaskStatus) (int, error) {
	ret := _m.Called(ctx, status)

	if len(ret) == 0 {
		panic("no return value specified for CountByStatus")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.HashCrackTaskStatus) (int, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.HashCrackTaskStatus) int); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.HashCrackTaskStatus) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_CountByStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByStatus'
type HashCrackTaskMock_CountByStatus_Call struct {
	*mock.Call
}

// CountByStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - status entity.HashCrackTaskStatus
func (_e *HashCrackTaskMock_Expecter) CountByStatus(ctx interface{}, status interface{}) *HashCrackTaskMock_CountByStatus_Call {
	return &HashCrackTaskMock_CountByStatus_Call{Call: _e.mock.On("CountByStatus", ctx, status)}
}

func (_c *HashCrackTaskMock_CountByStatus_Call) Run(run func(ctx context.Context, status entity.HashCrackTaskStatus)) *HashCrackTaskMock_CountByStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.HashCrackTaskStatus))
	})
	return _c
}

func (_c *HashCrackTaskMock_CountByStatus_Call) Return(_a0 int, _a1 error) *HashCrackTaskMock_CountByStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_CountByStatus_Call) RunAndReturn(run func(context.Context, entity.HashCrackTaskStatus) (int, error)) *HashCrackTaskMock_CountByStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, task
func (_m *HashCrackTaskMock) Create(ctx context.Context, task *entity.HashCrackTask) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.HashCrackTask) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type HashCrackTaskMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - task *entity.HashCrackTask
func (_e *HashCrackTaskMock_Expecter) Create(ctx interface{}, task interface{}) *HashCrackTaskMock_Create_Call {
	return &HashCrackTaskMock_Create_Call{Call: _e.mock.On("Create", ctx, task)}
}

func (_c *HashCrackTaskMock_Create_Call) Run(run func(ctx context.Context, task *entity.HashCrackTask)) *HashCrackTaskMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.HashCrackTask))
	})
	return _c
}

func (_c *HashCrackTaskMock_Create_Call) Return(_a0 error) *HashCrackTaskMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_Create_Call) RunAndReturn(run func(context.Context, *entity.HashCrackTask) error) *HashCrackTaskMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllExpired provides a mock function with given fields: ctx, maxAge
func (_m *HashCrackTaskMock) DeleteAllExpired(ctx context.Context, maxAge time.Duration) error {
	ret := _m.Called(ctx, maxAge)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, maxAge)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_DeleteAllExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllExpired'
type HashCrackTaskMock_DeleteAllExpired_Call struct {
	*mock.Call
}

// DeleteAllExpired is a helper method to define mock.On call
//   - ctx context.Context
//   - maxAge time.Duration
func (_e *HashCrackTaskMock_Expecter) DeleteAllExpired(ctx interface{}, maxAge interface{}) *HashCrackTaskMock_DeleteAllExpired_Call {
	return &HashCrackTaskMock_DeleteAllExpired_Call{Call: _e.mock.On("DeleteAllExpired", ctx, maxAge)}
}

func (_c *HashCrackTaskMock_DeleteAllExpired_Call) Run(run func(ctx context.Context, maxAge time.Duration)) *HashCrackTaskMock_DeleteAllExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *HashCrackTaskMock_DeleteAllExpired_Call) Return(_a0 error) *HashCrackTaskMock_DeleteAllExpired_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_DeleteAllExpired_Call) RunAndReturn(run func(context.Context, time.Duration) error) *HashCrackTaskMock_DeleteAllExpired_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *HashCrackTaskMock) Get(ctx context.Context, id primitive.ObjectID) (*entity.HashCrackTask, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.HashCrackTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) (*entity.HashCrackTask, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) *entity.HashCrackTask); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.HashCrackTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type HashCrackTaskMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id primitive.ObjectID
func (_e *HashCrackTaskMock_Expecter) Get(ctx interface{}, id interface{}) *HashCrackTaskMock_Get_Call {
	return &HashCrackTaskMock_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *HashCrackTaskMock_Get_Call) Run(run func(ctx context.Context, id primitive.ObjectID)) *HashCrackTaskMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.ObjectID))
	})
	return _c
}

func (_c *HashCrackTaskMock_Get_Call) Return(_a0 *entity.HashCrackTask, _a1 error) *HashCrackTaskMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_Get_Call) RunAndReturn(run func(context.Context, primitive.ObjectID) (*entity.HashCrackTask, error)) *HashCrackTaskMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByHashAndMaxLength provides a mock function with given fields: ctx, hash, maxLength
func (_m *HashCrackTaskMock) GetAllByHashAndMaxLength(ctx context.Context, hash string, maxLength int) ([]*entity.HashCrackTask, error) {
	ret := _m.Called(ctx, hash, maxLength)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByHashAndMaxLength")
	}

	var r0 []*entity.HashCrackTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) ([]*entity.HashCrackTask, error)); ok {
		return rf(ctx, hash, maxLength)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) []*entity.HashCrackTask); ok {
		r0 = rf(ctx, hash, maxLength)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.HashCrackTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, hash, maxLength)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_GetAllByHashAndMaxLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByHashAndMaxLength'
type HashCrackTaskMock_GetAllByHashAndMaxLength_Call struct {
	*mock.Call
}

// GetAllByHashAndMaxLength is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
//   - maxLength int
func (_e *HashCrackTaskMock_Expecter) GetAllByHashAndMaxLength(ctx interface{}, hash interface{}, maxLength interface{}) *HashCrackTaskMock_GetAllByHashAndMaxLength_Call {
	return &HashCrackTaskMock_GetAllByHashAndMaxLength_Call{Call: _e.mock.On("GetAllByHashAndMaxLength", ctx, hash, maxLength)}
}

func (_c *HashCrackTaskMock_GetAllByHashAndMaxLength_Call) Run(run func(ctx context.Context, hash string, maxLength int)) *HashCrackTaskMock_GetAllByHashAndMaxLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int))
	})
	return _c
}

func (_c *HashCrackTaskMock_GetAllByHashAndMaxLength_Call) Return(_a0 []*entity.HashCrackTask, _a1 error) *HashCrackTaskMock_GetAllByHashAndMaxLength_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_GetAllByHashAndMaxLength_Call) RunAndReturn(run func(context.Context, string, int) ([]*entity.HashCrackTask, error)) *HashCrackTaskMock_GetAllByHashAndMaxLength_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFinished provides a mock function with given fields: ctx
func (_m *HashCrackTaskMock) GetAllFinished(ctx context.Context) ([]*entity.HashCrackTask, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFinished")
	}

	var r0 []*entity.HashCrackTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*entity.HashCrackTask, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*entity.HashCrackTask); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.HashCrackTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_GetAllFinished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFinished'
type HashCrackTaskMock_GetAllFinished_Call struct {
	*mock.Call
}

// GetAllFinished is a helper method to define mock.On call
//   - ctx context.Context
func (_e *HashCrackTaskMock_Expecter) GetAllFinished(ctx interface{}) *HashCrackTaskMock_GetAllFinished_Call {
	return &HashCrackTaskMock_GetAllFinished_Call{Call: _e.mock.On("GetAllFinished", ctx)}
}

func (_c *HashCrackTaskMock_GetAllFinished_Call) Run(run func(ctx context.Context)) *HashCrackTaskMock_GetAllFinished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HashCrackTaskMock_GetAllFinished_Call) Return(_a0 []*entity.HashCrackTask, _a1 error) *HashCrackTaskMock_GetAllFinished_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_GetAllFinished_Call) RunAndReturn(run func(context.Context) ([]*entity.HashCrackTask, error)) *HashCrackTaskMock_GetAllFinished_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, task
func (_m *HashCrackTaskMock) Update(ctx context.Context, task *entity.HashCrackTask) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.HashCrackTask) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type HashCrackTaskMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - task *entity.HashCrackTask
func (_e *HashCrackTaskMock_Expecter) Update(ctx interface{}, task interface{}) *HashCrackTaskMock_Update_Call {
	return &HashCrackTaskMock_Update_Call{Call: _e.mock.On("Update", ctx, task)}
}

func (_c *HashCrackTaskMock_Update_Call) Run(run func(ctx context.Context, task *entity.HashCrackTask)) *HashCrackTaskMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.HashCrackTask))
	})
	return _c
}

func (_c *HashCrackTaskMock_Update_Call) Return(_a0 error) *HashCrackTaskMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_Update_Call) RunAndReturn(run func(context.Context, *entity.HashCrackTask) error) *HashCrackTaskMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewHashCrackTaskMock creates a new instance of HashCrackTaskMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashCrackTaskMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashCrackTaskMock {
	mock := &HashCrackTaskMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
