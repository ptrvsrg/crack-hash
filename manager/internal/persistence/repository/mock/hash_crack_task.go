// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/ptrvsrg/crack-hash/manager/internal/persistence/entity"
	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// HashCrackTaskMock is an autogenerated mock type for the HashCrackTask type
type HashCrackTaskMock struct {
	mock.Mock
}

type HashCrackTaskMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HashCrackTaskMock) EXPECT() *HashCrackTaskMock_Expecter {
	return &HashCrackTaskMock_Expecter{mock: &_m.Mock}
}

// CountAll provides a mock function with given fields: ctx
func (_m *HashCrackTaskMock) CountAll(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type HashCrackTaskMock_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *HashCrackTaskMock_Expecter) CountAll(ctx interface{}) *HashCrackTaskMock_CountAll_Call {
	return &HashCrackTaskMock_CountAll_Call{Call: _e.mock.On("CountAll", ctx)}
}

func (_c *HashCrackTaskMock_CountAll_Call) Run(run func(ctx context.Context)) *HashCrackTaskMock_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HashCrackTaskMock_CountAll_Call) Return(_a0 int64, _a1 error) *HashCrackTaskMock_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_CountAll_Call) RunAndReturn(run func(context.Context) (int64, error)) *HashCrackTaskMock_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, task
func (_m *HashCrackTaskMock) Create(ctx context.Context, task *entity.HashCrackTask) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.HashCrackTask) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type HashCrackTaskMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - task *entity.HashCrackTask
func (_e *HashCrackTaskMock_Expecter) Create(ctx interface{}, task interface{}) *HashCrackTaskMock_Create_Call {
	return &HashCrackTaskMock_Create_Call{Call: _e.mock.On("Create", ctx, task)}
}

func (_c *HashCrackTaskMock_Create_Call) Run(run func(ctx context.Context, task *entity.HashCrackTask)) *HashCrackTaskMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.HashCrackTask))
	})
	return _c
}

func (_c *HashCrackTaskMock_Create_Call) Return(_a0 error) *HashCrackTaskMock_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_Create_Call) RunAndReturn(run func(context.Context, *entity.HashCrackTask) error) *HashCrackTaskMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAllByIDs provides a mock function with given fields: ctx, ids
func (_m *HashCrackTaskMock) DeleteAllByIDs(ctx context.Context, ids []primitive.ObjectID) error {
	ret := _m.Called(ctx, ids)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllByIDs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []primitive.ObjectID) error); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_DeleteAllByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAllByIDs'
type HashCrackTaskMock_DeleteAllByIDs_Call struct {
	*mock.Call
}

// DeleteAllByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []primitive.ObjectID
func (_e *HashCrackTaskMock_Expecter) DeleteAllByIDs(ctx interface{}, ids interface{}) *HashCrackTaskMock_DeleteAllByIDs_Call {
	return &HashCrackTaskMock_DeleteAllByIDs_Call{Call: _e.mock.On("DeleteAllByIDs", ctx, ids)}
}

func (_c *HashCrackTaskMock_DeleteAllByIDs_Call) Run(run func(ctx context.Context, ids []primitive.ObjectID)) *HashCrackTaskMock_DeleteAllByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]primitive.ObjectID))
	})
	return _c
}

func (_c *HashCrackTaskMock_DeleteAllByIDs_Call) Return(_a0 error) *HashCrackTaskMock_DeleteAllByIDs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_DeleteAllByIDs_Call) RunAndReturn(run func(context.Context, []primitive.ObjectID) error) *HashCrackTaskMock_DeleteAllByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, id, withSubtasks
func (_m *HashCrackTaskMock) Get(ctx context.Context, id primitive.ObjectID, withSubtasks bool) (*entity.HashCrackTaskWithSubtasks, error) {
	ret := _m.Called(ctx, id, withSubtasks)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.HashCrackTaskWithSubtasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, bool) (*entity.HashCrackTaskWithSubtasks, error)); ok {
		return rf(ctx, id, withSubtasks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, bool) *entity.HashCrackTaskWithSubtasks); ok {
		r0 = rf(ctx, id, withSubtasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.HashCrackTaskWithSubtasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, bool) error); ok {
		r1 = rf(ctx, id, withSubtasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type HashCrackTaskMock_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - id primitive.ObjectID
//   - withSubtasks bool
func (_e *HashCrackTaskMock_Expecter) Get(ctx interface{}, id interface{}, withSubtasks interface{}) *HashCrackTaskMock_Get_Call {
	return &HashCrackTaskMock_Get_Call{Call: _e.mock.On("Get", ctx, id, withSubtasks)}
}

func (_c *HashCrackTaskMock_Get_Call) Run(run func(ctx context.Context, id primitive.ObjectID, withSubtasks bool)) *HashCrackTaskMock_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(primitive.ObjectID), args[2].(bool))
	})
	return _c
}

func (_c *HashCrackTaskMock_Get_Call) Return(_a0 *entity.HashCrackTaskWithSubtasks, _a1 error) *HashCrackTaskMock_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_Get_Call) RunAndReturn(run func(context.Context, primitive.ObjectID, bool) (*entity.HashCrackTaskWithSubtasks, error)) *HashCrackTaskMock_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, limit, offset, withSubtasks
func (_m *HashCrackTaskMock) GetAll(ctx context.Context, limit int, offset int, withSubtasks bool) ([]*entity.HashCrackTaskWithSubtasks, error) {
	ret := _m.Called(ctx, limit, offset, withSubtasks)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*entity.HashCrackTaskWithSubtasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool) ([]*entity.HashCrackTaskWithSubtasks, error)); ok {
		return rf(ctx, limit, offset, withSubtasks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, bool) []*entity.HashCrackTaskWithSubtasks); ok {
		r0 = rf(ctx, limit, offset, withSubtasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.HashCrackTaskWithSubtasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, bool) error); ok {
		r1 = rf(ctx, limit, offset, withSubtasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type HashCrackTaskMock_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
//   - withSubtasks bool
func (_e *HashCrackTaskMock_Expecter) GetAll(ctx interface{}, limit interface{}, offset interface{}, withSubtasks interface{}) *HashCrackTaskMock_GetAll_Call {
	return &HashCrackTaskMock_GetAll_Call{Call: _e.mock.On("GetAll", ctx, limit, offset, withSubtasks)}
}

func (_c *HashCrackTaskMock_GetAll_Call) Run(run func(ctx context.Context, limit int, offset int, withSubtasks bool)) *HashCrackTaskMock_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int), args[3].(bool))
	})
	return _c
}

func (_c *HashCrackTaskMock_GetAll_Call) Return(_a0 []*entity.HashCrackTaskWithSubtasks, _a1 error) *HashCrackTaskMock_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_GetAll_Call) RunAndReturn(run func(context.Context, int, int, bool) ([]*entity.HashCrackTaskWithSubtasks, error)) *HashCrackTaskMock_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllExpired provides a mock function with given fields: ctx, maxAge, withSubtasks
func (_m *HashCrackTaskMock) GetAllExpired(ctx context.Context, maxAge time.Duration, withSubtasks bool) ([]*entity.HashCrackTaskWithSubtasks, error) {
	ret := _m.Called(ctx, maxAge, withSubtasks)

	if len(ret) == 0 {
		panic("no return value specified for GetAllExpired")
	}

	var r0 []*entity.HashCrackTaskWithSubtasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, bool) ([]*entity.HashCrackTaskWithSubtasks, error)); ok {
		return rf(ctx, maxAge, withSubtasks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, bool) []*entity.HashCrackTaskWithSubtasks); ok {
		r0 = rf(ctx, maxAge, withSubtasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.HashCrackTaskWithSubtasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, bool) error); ok {
		r1 = rf(ctx, maxAge, withSubtasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_GetAllExpired_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllExpired'
type HashCrackTaskMock_GetAllExpired_Call struct {
	*mock.Call
}

// GetAllExpired is a helper method to define mock.On call
//   - ctx context.Context
//   - maxAge time.Duration
//   - withSubtasks bool
func (_e *HashCrackTaskMock_Expecter) GetAllExpired(ctx interface{}, maxAge interface{}, withSubtasks interface{}) *HashCrackTaskMock_GetAllExpired_Call {
	return &HashCrackTaskMock_GetAllExpired_Call{Call: _e.mock.On("GetAllExpired", ctx, maxAge, withSubtasks)}
}

func (_c *HashCrackTaskMock_GetAllExpired_Call) Run(run func(ctx context.Context, maxAge time.Duration, withSubtasks bool)) *HashCrackTaskMock_GetAllExpired_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(bool))
	})
	return _c
}

func (_c *HashCrackTaskMock_GetAllExpired_Call) Return(_a0 []*entity.HashCrackTaskWithSubtasks, _a1 error) *HashCrackTaskMock_GetAllExpired_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_GetAllExpired_Call) RunAndReturn(run func(context.Context, time.Duration, bool) ([]*entity.HashCrackTaskWithSubtasks, error)) *HashCrackTaskMock_GetAllExpired_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllFinished provides a mock function with given fields: ctx, withSubtasks
func (_m *HashCrackTaskMock) GetAllFinished(ctx context.Context, withSubtasks bool) ([]*entity.HashCrackTaskWithSubtasks, error) {
	ret := _m.Called(ctx, withSubtasks)

	if len(ret) == 0 {
		panic("no return value specified for GetAllFinished")
	}

	var r0 []*entity.HashCrackTaskWithSubtasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) ([]*entity.HashCrackTaskWithSubtasks, error)); ok {
		return rf(ctx, withSubtasks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) []*entity.HashCrackTaskWithSubtasks); ok {
		r0 = rf(ctx, withSubtasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.HashCrackTaskWithSubtasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, withSubtasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_GetAllFinished_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllFinished'
type HashCrackTaskMock_GetAllFinished_Call struct {
	*mock.Call
}

// GetAllFinished is a helper method to define mock.On call
//   - ctx context.Context
//   - withSubtasks bool
func (_e *HashCrackTaskMock_Expecter) GetAllFinished(ctx interface{}, withSubtasks interface{}) *HashCrackTaskMock_GetAllFinished_Call {
	return &HashCrackTaskMock_GetAllFinished_Call{Call: _e.mock.On("GetAllFinished", ctx, withSubtasks)}
}

func (_c *HashCrackTaskMock_GetAllFinished_Call) Run(run func(ctx context.Context, withSubtasks bool)) *HashCrackTaskMock_GetAllFinished_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *HashCrackTaskMock_GetAllFinished_Call) Return(_a0 []*entity.HashCrackTaskWithSubtasks, _a1 error) *HashCrackTaskMock_GetAllFinished_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_GetAllFinished_Call) RunAndReturn(run func(context.Context, bool) ([]*entity.HashCrackTaskWithSubtasks, error)) *HashCrackTaskMock_GetAllFinished_Call {
	_c.Call.Return(run)
	return _c
}

// GetByHashAndMaxLength provides a mock function with given fields: ctx, hash, maxLength, withSubtasks
func (_m *HashCrackTaskMock) GetByHashAndMaxLength(ctx context.Context, hash string, maxLength int, withSubtasks bool) (*entity.HashCrackTaskWithSubtasks, error) {
	ret := _m.Called(ctx, hash, maxLength, withSubtasks)

	if len(ret) == 0 {
		panic("no return value specified for GetByHashAndMaxLength")
	}

	var r0 *entity.HashCrackTaskWithSubtasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool) (*entity.HashCrackTaskWithSubtasks, error)); ok {
		return rf(ctx, hash, maxLength, withSubtasks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, bool) *entity.HashCrackTaskWithSubtasks); ok {
		r0 = rf(ctx, hash, maxLength, withSubtasks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.HashCrackTaskWithSubtasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, bool) error); ok {
		r1 = rf(ctx, hash, maxLength, withSubtasks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_GetByHashAndMaxLength_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByHashAndMaxLength'
type HashCrackTaskMock_GetByHashAndMaxLength_Call struct {
	*mock.Call
}

// GetByHashAndMaxLength is a helper method to define mock.On call
//   - ctx context.Context
//   - hash string
//   - maxLength int
//   - withSubtasks bool
func (_e *HashCrackTaskMock_Expecter) GetByHashAndMaxLength(ctx interface{}, hash interface{}, maxLength interface{}, withSubtasks interface{}) *HashCrackTaskMock_GetByHashAndMaxLength_Call {
	return &HashCrackTaskMock_GetByHashAndMaxLength_Call{Call: _e.mock.On("GetByHashAndMaxLength", ctx, hash, maxLength, withSubtasks)}
}

func (_c *HashCrackTaskMock_GetByHashAndMaxLength_Call) Run(run func(ctx context.Context, hash string, maxLength int, withSubtasks bool)) *HashCrackTaskMock_GetByHashAndMaxLength_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int), args[3].(bool))
	})
	return _c
}

func (_c *HashCrackTaskMock_GetByHashAndMaxLength_Call) Return(_a0 *entity.HashCrackTaskWithSubtasks, _a1 error) *HashCrackTaskMock_GetByHashAndMaxLength_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_GetByHashAndMaxLength_Call) RunAndReturn(run func(context.Context, string, int, bool) (*entity.HashCrackTaskWithSubtasks, error)) *HashCrackTaskMock_GetByHashAndMaxLength_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, task
func (_m *HashCrackTaskMock) Update(ctx context.Context, task *entity.HashCrackTask) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.HashCrackTask) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type HashCrackTaskMock_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - task *entity.HashCrackTask
func (_e *HashCrackTaskMock_Expecter) Update(ctx interface{}, task interface{}) *HashCrackTaskMock_Update_Call {
	return &HashCrackTaskMock_Update_Call{Call: _e.mock.On("Update", ctx, task)}
}

func (_c *HashCrackTaskMock_Update_Call) Run(run func(ctx context.Context, task *entity.HashCrackTask)) *HashCrackTaskMock_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.HashCrackTask))
	})
	return _c
}

func (_c *HashCrackTaskMock_Update_Call) Return(_a0 error) *HashCrackTaskMock_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_Update_Call) RunAndReturn(run func(context.Context, *entity.HashCrackTask) error) *HashCrackTaskMock_Update_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function with given fields: ctx, fn
func (_m *HashCrackTaskMock) WithTransaction(ctx context.Context, fn func(context.Context) (any, error)) (any, error) {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (any, error)) (any, error)); ok {
		return rf(ctx, fn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (any, error)) any); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(context.Context) (any, error)) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type HashCrackTaskMock_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context)(any , error)
func (_e *HashCrackTaskMock_Expecter) WithTransaction(ctx interface{}, fn interface{}) *HashCrackTaskMock_WithTransaction_Call {
	return &HashCrackTaskMock_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx, fn)}
}

func (_c *HashCrackTaskMock_WithTransaction_Call) Run(run func(ctx context.Context, fn func(context.Context) (any, error))) *HashCrackTaskMock_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) (any, error)))
	})
	return _c
}

func (_c *HashCrackTaskMock_WithTransaction_Call) Return(_a0 any, _a1 error) *HashCrackTaskMock_WithTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_WithTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) (any, error)) (any, error)) *HashCrackTaskMock_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewHashCrackTaskMock creates a new instance of HashCrackTaskMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashCrackTaskMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashCrackTaskMock {
	mock := &HashCrackTaskMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
