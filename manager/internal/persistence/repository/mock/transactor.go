// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransactorMock is an autogenerated mock type for the Transactor type
type TransactorMock struct {
	mock.Mock
}

type TransactorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactorMock) EXPECT() *TransactorMock_Expecter {
	return &TransactorMock_Expecter{mock: &_m.Mock}
}

// WithTransaction provides a mock function with given fields: ctx, fn
func (_m *TransactorMock) WithTransaction(ctx context.Context, fn func(context.Context) (any, error)) (any, error) {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 any
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (any, error)) (any, error)); ok {
		return rf(ctx, fn)
	}
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) (any, error)) any); ok {
		r0 = rf(ctx, fn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(any)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, func(context.Context) (any, error)) error); ok {
		r1 = rf(ctx, fn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactorMock_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type TransactorMock_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(context.Context)(any , error)
func (_e *TransactorMock_Expecter) WithTransaction(ctx interface{}, fn interface{}) *TransactorMock_WithTransaction_Call {
	return &TransactorMock_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx, fn)}
}

func (_c *TransactorMock_WithTransaction_Call) Run(run func(ctx context.Context, fn func(context.Context) (any, error))) *TransactorMock_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) (any, error)))
	})
	return _c
}

func (_c *TransactorMock_WithTransaction_Call) Return(_a0 any, _a1 error) *TransactorMock_WithTransaction_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactorMock_WithTransaction_Call) RunAndReturn(run func(context.Context, func(context.Context) (any, error)) (any, error)) *TransactorMock_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactorMock creates a new instance of TransactorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactorMock {
	mock := &TransactorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
