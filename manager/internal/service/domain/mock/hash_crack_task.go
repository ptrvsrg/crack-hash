// Code generated by mockery v2.52.3. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/ptrvsrg/crack-hash/manager/pkg/model"
)

// HashCrackTaskMock is an autogenerated mock type for the HashCrackTask type
type HashCrackTaskMock struct {
	mock.Mock
}

type HashCrackTaskMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HashCrackTaskMock) EXPECT() *HashCrackTaskMock_Expecter {
	return &HashCrackTaskMock_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: ctx, input
func (_m *HashCrackTaskMock) CreateTask(ctx context.Context, input *model.HashCrackTaskInput) (*model.HashCrackTaskIDOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *model.HashCrackTaskIDOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.HashCrackTaskInput) (*model.HashCrackTaskIDOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.HashCrackTaskInput) *model.HashCrackTaskIDOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HashCrackTaskIDOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.HashCrackTaskInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type HashCrackTaskMock_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - input *model.HashCrackTaskInput
func (_e *HashCrackTaskMock_Expecter) CreateTask(ctx interface{}, input interface{}) *HashCrackTaskMock_CreateTask_Call {
	return &HashCrackTaskMock_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, input)}
}

func (_c *HashCrackTaskMock_CreateTask_Call) Run(run func(ctx context.Context, input *model.HashCrackTaskInput)) *HashCrackTaskMock_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.HashCrackTaskInput))
	})
	return _c
}

func (_c *HashCrackTaskMock_CreateTask_Call) Return(_a0 *model.HashCrackTaskIDOutput, _a1 error) *HashCrackTaskMock_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_CreateTask_Call) RunAndReturn(run func(context.Context, *model.HashCrackTaskInput) (*model.HashCrackTaskIDOutput, error)) *HashCrackTaskMock_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// FinishTask provides a mock function with given fields: ctx, id
func (_m *HashCrackTaskMock) FinishTask(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FinishTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_FinishTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishTask'
type HashCrackTaskMock_FinishTask_Call struct {
	*mock.Call
}

// FinishTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *HashCrackTaskMock_Expecter) FinishTask(ctx interface{}, id interface{}) *HashCrackTaskMock_FinishTask_Call {
	return &HashCrackTaskMock_FinishTask_Call{Call: _e.mock.On("FinishTask", ctx, id)}
}

func (_c *HashCrackTaskMock_FinishTask_Call) Run(run func(ctx context.Context, id string)) *HashCrackTaskMock_FinishTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *HashCrackTaskMock_FinishTask_Call) Return(_a0 error) *HashCrackTaskMock_FinishTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_FinishTask_Call) RunAndReturn(run func(context.Context, string) error) *HashCrackTaskMock_FinishTask_Call {
	_c.Call.Return(run)
	return _c
}

// FinishTasks provides a mock function with given fields: ctx
func (_m *HashCrackTaskMock) FinishTasks(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FinishTasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_FinishTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FinishTasks'
type HashCrackTaskMock_FinishTasks_Call struct {
	*mock.Call
}

// FinishTasks is a helper method to define mock.On call
//   - ctx context.Context
func (_e *HashCrackTaskMock_Expecter) FinishTasks(ctx interface{}) *HashCrackTaskMock_FinishTasks_Call {
	return &HashCrackTaskMock_FinishTasks_Call{Call: _e.mock.On("FinishTasks", ctx)}
}

func (_c *HashCrackTaskMock_FinishTasks_Call) Run(run func(ctx context.Context)) *HashCrackTaskMock_FinishTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *HashCrackTaskMock_FinishTasks_Call) Return(_a0 error) *HashCrackTaskMock_FinishTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_FinishTasks_Call) RunAndReturn(run func(context.Context) error) *HashCrackTaskMock_FinishTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTaskStatus provides a mock function with given fields: ctx, id
func (_m *HashCrackTaskMock) GetTaskStatus(ctx context.Context, id string) (*model.HashCrackTaskStatusOutput, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskStatus")
	}

	var r0 *model.HashCrackTaskStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.HashCrackTaskStatusOutput, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.HashCrackTaskStatusOutput); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.HashCrackTaskStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashCrackTaskMock_GetTaskStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTaskStatus'
type HashCrackTaskMock_GetTaskStatus_Call struct {
	*mock.Call
}

// GetTaskStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *HashCrackTaskMock_Expecter) GetTaskStatus(ctx interface{}, id interface{}) *HashCrackTaskMock_GetTaskStatus_Call {
	return &HashCrackTaskMock_GetTaskStatus_Call{Call: _e.mock.On("GetTaskStatus", ctx, id)}
}

func (_c *HashCrackTaskMock_GetTaskStatus_Call) Run(run func(ctx context.Context, id string)) *HashCrackTaskMock_GetTaskStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *HashCrackTaskMock_GetTaskStatus_Call) Return(_a0 *model.HashCrackTaskStatusOutput, _a1 error) *HashCrackTaskMock_GetTaskStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashCrackTaskMock_GetTaskStatus_Call) RunAndReturn(run func(context.Context, string) (*model.HashCrackTaskStatusOutput, error)) *HashCrackTaskMock_GetTaskStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SaveResultTask provides a mock function with given fields: ctx, input
func (_m *HashCrackTaskMock) SaveResultTask(ctx context.Context, input *model.HashCrackTaskWebhookInput) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for SaveResultTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.HashCrackTaskWebhookInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_SaveResultTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveResultTask'
type HashCrackTaskMock_SaveResultTask_Call struct {
	*mock.Call
}

// SaveResultTask is a helper method to define mock.On call
//   - ctx context.Context
//   - input *model.HashCrackTaskWebhookInput
func (_e *HashCrackTaskMock_Expecter) SaveResultTask(ctx interface{}, input interface{}) *HashCrackTaskMock_SaveResultTask_Call {
	return &HashCrackTaskMock_SaveResultTask_Call{Call: _e.mock.On("SaveResultTask", ctx, input)}
}

func (_c *HashCrackTaskMock_SaveResultTask_Call) Run(run func(ctx context.Context, input *model.HashCrackTaskWebhookInput)) *HashCrackTaskMock_SaveResultTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.HashCrackTaskWebhookInput))
	})
	return _c
}

func (_c *HashCrackTaskMock_SaveResultTask_Call) Return(_a0 error) *HashCrackTaskMock_SaveResultTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_SaveResultTask_Call) RunAndReturn(run func(context.Context, *model.HashCrackTaskWebhookInput) error) *HashCrackTaskMock_SaveResultTask_Call {
	_c.Call.Return(run)
	return _c
}

// StartExecuteTask provides a mock function with given fields: ctx, id
func (_m *HashCrackTaskMock) StartExecuteTask(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for StartExecuteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_StartExecuteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartExecuteTask'
type HashCrackTaskMock_StartExecuteTask_Call struct {
	*mock.Call
}

// StartExecuteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *HashCrackTaskMock_Expecter) StartExecuteTask(ctx interface{}, id interface{}) *HashCrackTaskMock_StartExecuteTask_Call {
	return &HashCrackTaskMock_StartExecuteTask_Call{Call: _e.mock.On("StartExecuteTask", ctx, id)}
}

func (_c *HashCrackTaskMock_StartExecuteTask_Call) Run(run func(ctx context.Context, id string)) *HashCrackTaskMock_StartExecuteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *HashCrackTaskMock_StartExecuteTask_Call) Return(_a0 error) *HashCrackTaskMock_StartExecuteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_StartExecuteTask_Call) RunAndReturn(run func(context.Context, string) error) *HashCrackTaskMock_StartExecuteTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewHashCrackTaskMock creates a new instance of HashCrackTaskMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashCrackTaskMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashCrackTaskMock {
	mock := &HashCrackTaskMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
