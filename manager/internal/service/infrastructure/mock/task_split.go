// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TaskSplitMock is an autogenerated mock type for the TaskSplit type
type TaskSplitMock struct {
	mock.Mock
}

type TaskSplitMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskSplitMock) EXPECT() *TaskSplitMock_Expecter {
	return &TaskSplitMock_Expecter{mock: &_m.Mock}
}

// Split provides a mock function with given fields: ctx, wordMaxLength, alphabetLength
func (_m *TaskSplitMock) Split(ctx context.Context, wordMaxLength int, alphabetLength int) (int, error) {
	ret := _m.Called(ctx, wordMaxLength, alphabetLength)

	if len(ret) == 0 {
		panic("no return value specified for Split")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (int, error)); ok {
		return rf(ctx, wordMaxLength, alphabetLength)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int); ok {
		r0 = rf(ctx, wordMaxLength, alphabetLength)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, wordMaxLength, alphabetLength)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TaskSplitMock_Split_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Split'
type TaskSplitMock_Split_Call struct {
	*mock.Call
}

// Split is a helper method to define mock.On call
//   - ctx context.Context
//   - wordMaxLength int
//   - alphabetLength int
func (_e *TaskSplitMock_Expecter) Split(ctx interface{}, wordMaxLength interface{}, alphabetLength interface{}) *TaskSplitMock_Split_Call {
	return &TaskSplitMock_Split_Call{Call: _e.mock.On("Split", ctx, wordMaxLength, alphabetLength)}
}

func (_c *TaskSplitMock_Split_Call) Run(run func(ctx context.Context, wordMaxLength int, alphabetLength int)) *TaskSplitMock_Split_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *TaskSplitMock_Split_Call) Return(_a0 int, _a1 error) *TaskSplitMock_Split_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TaskSplitMock_Split_Call) RunAndReturn(run func(context.Context, int, int) (int, error)) *TaskSplitMock_Split_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskSplitMock creates a new instance of TaskSplitMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskSplitMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskSplitMock {
	mock := &TaskSplitMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
