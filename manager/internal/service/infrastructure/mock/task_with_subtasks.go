// Code generated by mockery v2.53.4. DO NOT EDIT.

package mock

import (
	context "context"

	entity "github.com/ptrvsrg/crack-hash/manager/internal/persistence/entity"

	mock "github.com/stretchr/testify/mock"
)

// TaskWithSubtasksMock is an autogenerated mock type for the TaskWithSubtasks type
type TaskWithSubtasksMock struct {
	mock.Mock
}

type TaskWithSubtasksMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskWithSubtasksMock) EXPECT() *TaskWithSubtasksMock_Expecter {
	return &TaskWithSubtasksMock_Expecter{mock: &_m.Mock}
}

// CreateTaskWithSubtasks provides a mock function with given fields: ctx, task
func (_m *TaskWithSubtasksMock) CreateTaskWithSubtasks(ctx context.Context, task *entity.HashCrackTaskWithSubtasks) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskWithSubtasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.HashCrackTaskWithSubtasks) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskWithSubtasksMock_CreateTaskWithSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTaskWithSubtasks'
type TaskWithSubtasksMock_CreateTaskWithSubtasks_Call struct {
	*mock.Call
}

// CreateTaskWithSubtasks is a helper method to define mock.On call
//   - ctx context.Context
//   - task *entity.HashCrackTaskWithSubtasks
func (_e *TaskWithSubtasksMock_Expecter) CreateTaskWithSubtasks(ctx interface{}, task interface{}) *TaskWithSubtasksMock_CreateTaskWithSubtasks_Call {
	return &TaskWithSubtasksMock_CreateTaskWithSubtasks_Call{Call: _e.mock.On("CreateTaskWithSubtasks", ctx, task)}
}

func (_c *TaskWithSubtasksMock_CreateTaskWithSubtasks_Call) Run(run func(ctx context.Context, task *entity.HashCrackTaskWithSubtasks)) *TaskWithSubtasksMock_CreateTaskWithSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.HashCrackTaskWithSubtasks))
	})
	return _c
}

func (_c *TaskWithSubtasksMock_CreateTaskWithSubtasks_Call) Return(_a0 error) *TaskWithSubtasksMock_CreateTaskWithSubtasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskWithSubtasksMock_CreateTaskWithSubtasks_Call) RunAndReturn(run func(context.Context, *entity.HashCrackTaskWithSubtasks) error) *TaskWithSubtasksMock_CreateTaskWithSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTasksWithSubtasks provides a mock function with given fields: ctx, tasks
func (_m *TaskWithSubtasksMock) DeleteTasksWithSubtasks(ctx context.Context, tasks []*entity.HashCrackTaskWithSubtasks) error {
	ret := _m.Called(ctx, tasks)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTasksWithSubtasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entity.HashCrackTaskWithSubtasks) error); ok {
		r0 = rf(ctx, tasks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTasksWithSubtasks'
type TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call struct {
	*mock.Call
}

// DeleteTasksWithSubtasks is a helper method to define mock.On call
//   - ctx context.Context
//   - tasks []*entity.HashCrackTaskWithSubtasks
func (_e *TaskWithSubtasksMock_Expecter) DeleteTasksWithSubtasks(ctx interface{}, tasks interface{}) *TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call {
	return &TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call{Call: _e.mock.On("DeleteTasksWithSubtasks", ctx, tasks)}
}

func (_c *TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call) Run(run func(ctx context.Context, tasks []*entity.HashCrackTaskWithSubtasks)) *TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*entity.HashCrackTaskWithSubtasks))
	})
	return _c
}

func (_c *TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call) Return(_a0 error) *TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call) RunAndReturn(run func(context.Context, []*entity.HashCrackTaskWithSubtasks) error) *TaskWithSubtasksMock_DeleteTasksWithSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTaskWithSubtasks provides a mock function with given fields: ctx, task
func (_m *TaskWithSubtasksMock) UpdateTaskWithSubtasks(ctx context.Context, task *entity.HashCrackTaskWithSubtasks) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskWithSubtasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.HashCrackTaskWithSubtasks) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTaskWithSubtasks'
type TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call struct {
	*mock.Call
}

// UpdateTaskWithSubtasks is a helper method to define mock.On call
//   - ctx context.Context
//   - task *entity.HashCrackTaskWithSubtasks
func (_e *TaskWithSubtasksMock_Expecter) UpdateTaskWithSubtasks(ctx interface{}, task interface{}) *TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call {
	return &TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call{Call: _e.mock.On("UpdateTaskWithSubtasks", ctx, task)}
}

func (_c *TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call) Run(run func(ctx context.Context, task *entity.HashCrackTaskWithSubtasks)) *TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.HashCrackTaskWithSubtasks))
	})
	return _c
}

func (_c *TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call) Return(_a0 error) *TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call) RunAndReturn(run func(context.Context, *entity.HashCrackTaskWithSubtasks) error) *TaskWithSubtasksMock_UpdateTaskWithSubtasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskWithSubtasksMock creates a new instance of TaskWithSubtasksMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskWithSubtasksMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskWithSubtasksMock {
	mock := &TaskWithSubtasksMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
