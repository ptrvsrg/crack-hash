// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	context "context"

	message "github.com/ptrvsrg/crack-hash/manager/pkg/message"

	mock "github.com/stretchr/testify/mock"
)

// HashCrackTaskMock is an autogenerated mock type for the HashCrackTask type
type HashCrackTaskMock struct {
	mock.Mock
}

type HashCrackTaskMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HashCrackTaskMock) EXPECT() *HashCrackTaskMock_Expecter {
	return &HashCrackTaskMock_Expecter{mock: &_m.Mock}
}

// ExecuteTask provides a mock function with given fields: ctx, input
func (_m *HashCrackTaskMock) ExecuteTask(ctx context.Context, input *message.HashCrackTaskStarted) error {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *message.HashCrackTaskStarted) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HashCrackTaskMock_ExecuteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteTask'
type HashCrackTaskMock_ExecuteTask_Call struct {
	*mock.Call
}

// ExecuteTask is a helper method to define mock.On call
//   - ctx context.Context
//   - input *message.HashCrackTaskStarted
func (_e *HashCrackTaskMock_Expecter) ExecuteTask(ctx interface{}, input interface{}) *HashCrackTaskMock_ExecuteTask_Call {
	return &HashCrackTaskMock_ExecuteTask_Call{Call: _e.mock.On("ExecuteTask", ctx, input)}
}

func (_c *HashCrackTaskMock_ExecuteTask_Call) Run(run func(ctx context.Context, input *message.HashCrackTaskStarted)) *HashCrackTaskMock_ExecuteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*message.HashCrackTaskStarted))
	})
	return _c
}

func (_c *HashCrackTaskMock_ExecuteTask_Call) Return(_a0 error) *HashCrackTaskMock_ExecuteTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HashCrackTaskMock_ExecuteTask_Call) RunAndReturn(run func(context.Context, *message.HashCrackTaskStarted) error) *HashCrackTaskMock_ExecuteTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewHashCrackTaskMock creates a new instance of HashCrackTaskMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashCrackTaskMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashCrackTaskMock {
	mock := &HashCrackTaskMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
