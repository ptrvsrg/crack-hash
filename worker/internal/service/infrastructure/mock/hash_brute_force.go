// Code generated by mockery v2.53.3. DO NOT EDIT.

package mock

import (
	infrastructure "github.com/ptrvsrg/crack-hash/worker/internal/service/infrastructure"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// HashBruteForceMock is an autogenerated mock type for the HashBruteForce type
type HashBruteForceMock struct {
	mock.Mock
}

type HashBruteForceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *HashBruteForceMock) EXPECT() *HashBruteForceMock_Expecter {
	return &HashBruteForceMock_Expecter{mock: &_m.Mock}
}

// BruteForceMD5 provides a mock function with given fields: hash, alphabet, maxLength, partNumber, progressPeriod
func (_m *HashBruteForceMock) BruteForceMD5(hash string, alphabet []string, maxLength int, partNumber int, progressPeriod time.Duration) (<-chan infrastructure.TaskProgress, error) {
	ret := _m.Called(hash, alphabet, maxLength, partNumber, progressPeriod)

	if len(ret) == 0 {
		panic("no return value specified for BruteForceMD5")
	}

	var r0 <-chan infrastructure.TaskProgress
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []string, int, int, time.Duration) (<-chan infrastructure.TaskProgress, error)); ok {
		return rf(hash, alphabet, maxLength, partNumber, progressPeriod)
	}
	if rf, ok := ret.Get(0).(func(string, []string, int, int, time.Duration) <-chan infrastructure.TaskProgress); ok {
		r0 = rf(hash, alphabet, maxLength, partNumber, progressPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan infrastructure.TaskProgress)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []string, int, int, time.Duration) error); ok {
		r1 = rf(hash, alphabet, maxLength, partNumber, progressPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HashBruteForceMock_BruteForceMD5_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BruteForceMD5'
type HashBruteForceMock_BruteForceMD5_Call struct {
	*mock.Call
}

// BruteForceMD5 is a helper method to define mock.On call
//   - hash string
//   - alphabet []string
//   - maxLength int
//   - partNumber int
//   - progressPeriod time.Duration
func (_e *HashBruteForceMock_Expecter) BruteForceMD5(hash interface{}, alphabet interface{}, maxLength interface{}, partNumber interface{}, progressPeriod interface{}) *HashBruteForceMock_BruteForceMD5_Call {
	return &HashBruteForceMock_BruteForceMD5_Call{Call: _e.mock.On("BruteForceMD5", hash, alphabet, maxLength, partNumber, progressPeriod)}
}

func (_c *HashBruteForceMock_BruteForceMD5_Call) Run(run func(hash string, alphabet []string, maxLength int, partNumber int, progressPeriod time.Duration)) *HashBruteForceMock_BruteForceMD5_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]string), args[2].(int), args[3].(int), args[4].(time.Duration))
	})
	return _c
}

func (_c *HashBruteForceMock_BruteForceMD5_Call) Return(_a0 <-chan infrastructure.TaskProgress, _a1 error) *HashBruteForceMock_BruteForceMD5_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HashBruteForceMock_BruteForceMD5_Call) RunAndReturn(run func(string, []string, int, int, time.Duration) (<-chan infrastructure.TaskProgress, error)) *HashBruteForceMock_BruteForceMD5_Call {
	_c.Call.Return(run)
	return _c
}

// NewHashBruteForceMock creates a new instance of HashBruteForceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHashBruteForceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *HashBruteForceMock {
	mock := &HashBruteForceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
